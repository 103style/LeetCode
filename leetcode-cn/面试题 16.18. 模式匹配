# [面试题 16.18. 模式匹配](https://leetcode-cn.com/problems/pattern-matching-lcci/)

---

**leetcode-cn Daily Chanlenge June 22, 2020**

---

你有两个字符串，即 `pattern` 和 `value`。 `pattern` 字符串由字母 `"a"` 和 `"b"` 组成，用于描述字符串中的模式。例如，字符串`"catcatgocatgo"`匹配模式`"aabab"`（其中`"cat"`是`"a"`，`"go"`是`"b"`），该字符串也匹配像`"a"`、`"ab"`和`"b"`这样的模式。但需注意`"a"`和`"b"`不能同时表示相同的字符串。编写一个方法判断`value`字符串是否匹配`pattern`字符串。

### 示例 1：
```
输入： pattern = "abba", value = "dogcatcatdog"
输出： true
```

### 示例 2：
```
输入： pattern = "abba", value = "dogcatcatfish"
输出： false
```

### 示例 3：
```
输入： pattern = "aaaa", value = "dogcatcatdog"
输出： false
```

### 示例 4：
```
输入： pattern = "abba", value = "dogdogdogdog"
输出： true
解释： "a"="dogdog",b=""，反之也符合规则
```

### 提示：
* `0 <= len(pattern) <= 1000`
* `0 <= len(value) <= 1000`
* 你可以假设`pattern`只包含字母`"a"`和`"b"`，`value`仅包含小写字母。

---

### Solution
* **mine**
  * **Java**
    
    **got from the leetcode solution** `执行用时：1 ms, 内存消耗：37.8 MB, 在所有 Java 提交中击败了 100.00% 的用户`
    ```
    public boolean patternMatching(String pattern, String value) {
        int countA = 0, countB = 0;
        for (char ch : pattern.toCharArray()) {
            if (ch == 'a') {
                countA++;
            } else {
                countB++;
            }
        }
        if (countA < countB) {
            int temp = countA;
            countA = countB;
            countB = temp;
            char[] array = pattern.toCharArray();
            for (int i = 0; i < array.length; i++) {
                array[i] = array[i] == 'a' ? 'b' : 'a';
            }
            pattern = new String(array);
        }
        //the up code is to made the count of a is the larger one in the pattern

        if (value.length() == 0) {
            //if value is "", so will match when b's count = 0, and a = ''
            return countB == 0;
        }
        //if pattern.length == 0 but value.length != 0, so not match
        if (pattern.length() == 0) {
            return false;
        }
        char[] patternArr = pattern.toCharArray();
        //traverse lenA form 0 to countA * lenA <= value.length
        for (int lenA = 0; countA * lenA <= value.length(); lenA++) {
            //get lenB
            int rest = value.length() - countA * lenA;
            //check lenB is legal for b
            boolean legal = (countB == 0 && rest == 0)
                    || (countB != 0 && rest % countB == 0);
            if (!legal) {
                continue;
            }
            //get the lenB when we know lenA
            int lenB = countB == 0 ? 0 : rest / countB;
            String valueA = "", valueB = "";
            //record cur is match a and b
            boolean correct = true;
            //record the cur index
            int pos = 0;
            for (char ch : patternArr) {
                if (ch == 'a') {
                    String sub = value.substring(pos, pos + lenA);
                    if (valueA.length() == 0) {
                        //init a
                        valueA = sub;
                    } else if (!valueA.equals(sub)) {
                        // partA != a, so not match
                        correct = false;
                        break;
                    }
                    pos += lenA;
                } else {
                    String sub = value.substring(pos, pos + lenB);
                    if (valueB.length() == 0) {
                        //init b
                        valueB = sub;
                    } else if (!valueB.equals(sub)) {
                        // partB != b, so not match
                        correct = false;
                        break;
                    }
                    pos += lenB;
                }
            }
            //if pattern match string and  a != b, so the res is match
            if (correct && !valueA.equals(valueB)) {
                return true;
            }
        }
        return false;
    }
    ```
  
  
---


* **the leetcode solution**
  * `执行用时：1 ms, 内存消耗：37.8 MB, 在所有 Java 提交中击败了 100.00% 的用户`
    ```
    public boolean patternMatching(String pattern, String value) {
        int count_a = 0, count_b = 0;
        for (char ch: pattern.toCharArray()) {
            if (ch == 'a') {
                ++count_a;
            } else {
                ++count_b;
            }
        }
        if (count_a < count_b) {
            int temp = count_a;
            count_a = count_b;
            count_b = temp;
            char[] array = pattern.toCharArray();
            for (int i = 0; i < array.length; i++) {
                array[i] = array[i] == 'a' ? 'b' : 'a';
            }
            pattern = new String(array);
        }
        if (value.length() == 0) {
            return count_b == 0;
        }
        if (pattern.length() == 0) {
            return false;
        }
        for (int len_a = 0; count_a * len_a <= value.length(); ++len_a) {
            int rest = value.length() - count_a * len_a;
            if ((count_b == 0 && rest == 0) || (count_b != 0 && rest % count_b == 0)) {
                int len_b = (count_b == 0 ? 0 : rest / count_b);
                int pos = 0;
                boolean correct = true;
                String value_a = "", value_b = "";
                for (char ch: pattern.toCharArray()) {
                    if (ch == 'a') {
                        String sub = value.substring(pos, pos + len_a);
                        if (value_a.length() == 0) {
                            value_a = sub;
                        } else if (!value_a.equals(sub)) {
                            correct = false;
                            break;
                        }
                        pos += len_a;
                    } else {
                        String sub = value.substring(pos, pos + len_b);
                        if (value_b.length() == 0) {
                            value_b = sub;
                        } else if (!value_b.equals(sub)) {
                            correct = false;
                            break;
                        }
                        pos += len_b;
                    }
                }
                if (correct && !value_a.equals(value_b)) {
                    return true;
                }
            }
        }
        return false;
    }
    ```
